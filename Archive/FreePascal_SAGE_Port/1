Comparing files P:\REGEXPR\RELEASES\0947 20011001\RegExpr.pas and REGEXPR_FPC.PAS
***** P:\REGEXPR\RELEASES\0947 20011001\RegExpr.pas
{$B-}
unit RegExpr;

***** REGEXPR_FPC.PAS
{$MODE DELPHI}
{$ASMMODE INTEL}

unit RegExpr_FPC;

*****

***** P:\REGEXPR\RELEASES\0947 20011001\RegExpr.pas
    testing in CPPB and suggesting/implementing many features
  Steve Mudford
    implemented Offset parameter
***** REGEXPR_FPC.PAS
    testing in CPPB and suggesting/implementing many features
    Steve Mudford
    implemented Offset parameter
*****

***** P:\REGEXPR\RELEASES\0947 20011001\RegExpr.pas
 PRegExprChar = PChar;
 RegExprString = string;
 REChar = Char;
***** REGEXPR_FPC.PAS
 PRegExprChar = PChar;
 RegExprString = AnsiString;
 REChar = Char;
*****

***** P:\REGEXPR\RELEASES\0947 20011001\RegExpr.pas
    property ModifierR : boolean index 2 read GetModifier write SetModifier;
    // Modifier /r - use r.e.syntax extended for russian, 
    // (was property ExtSyntaxEnabled in previous versions)
***** REGEXPR_FPC.PAS
    property ModifierR : boolean index 2 read GetModifier write SetModifier;
    // Modifier /r - use r.e.syntax extended for russian,
    // (was property ExtSyntaxEnabled in previous versions)
*****

***** P:\REGEXPR\RELEASES\0947 20011001\RegExpr.pas

    function ExecPos (AOffset: integer {$IFDEF D4_}= 1{$ENDIF}) : boolean;
    // find match for InputString starting from AOffset position
***** REGEXPR_FPC.PAS

    function ExecPos (AOffset: integer  (* {$IFDEF D4_}= 1{$ENDIF} *) ) : boolean;
    // find match for InputString starting from AOffset position
*****

***** P:\REGEXPR\RELEASES\0947 20011001\RegExpr.pas
      const AReplaceStr : RegExprString;
      AUseSubstitution : boolean{$IFDEF D4_}= False{$ENDIF}) //###0.946
     : RegExprString;
***** REGEXPR_FPC.PAS
      const AReplaceStr : RegExprString;
      AUseSubstitution : boolean (* {$IFDEF D4_}= False{$ENDIF} *) ) //###0.946
     : RegExprString;
*****

***** P:\REGEXPR\RELEASES\0947 20011001\RegExpr.pas

const
  RegExprInvertCaseFunction : TRegExprInvertCaseFunction = TRegExpr.InvertCaseFunction;
  // defaul for InvertCase property

***** REGEXPR_FPC.PAS


//const
//  RegExprInvertCaseFunction: TRegExprInvertCaseFunction = TRegExpr.InvertCaseFunction ;
// defaul for InvertCase property



*****

***** P:\REGEXPR\RELEASES\0947 20011001\RegExpr.pas
function ExecRegExpr (const ARegExpr, AInputStr : RegExprString) : boolean;
// true if string AInputString match regular expression ARegExpr
***** REGEXPR_FPC.PAS
function ExecRegExpr (const ARegExpr, AInputStr : RegExprString) : boolean;






// true if string AInputString match regular expression ARegExpr
*****

***** P:\REGEXPR\RELEASES\0947 20011001\RegExpr.pas
function ReplaceRegExpr (const ARegExpr, AInputStr, AReplaceStr : RegExprString;
      AUseSubstitution : boolean{$IFDEF D4_}= False{$ENDIF}) : RegExprString; //###0.947
// Returns AInputStr with r.e. occurencies replaced by AReplaceStr
***** REGEXPR_FPC.PAS
function ReplaceRegExpr (const ARegExpr, AInputStr, AReplaceStr : RegExprString;
      AUseSubstitution : boolean (* {$IFDEF D4_}= False{$ENDIF} *) ) : RegExprString; //###0.947
// Returns AInputStr with r.e. occurencies replaced by AReplaceStr
*****

***** P:\REGEXPR\RELEASES\0947 20011001\RegExpr.pas
function RegExprSubExpressions (const ARegExpr : string;
 ASubExprs : TStrings; AExtendedSyntax : boolean{$IFDEF D4_}= False{$ENDIF}) : integer;
// Makes list of subexpressions found in ARegExpr r.e.
***** REGEXPR_FPC.PAS
function RegExprSubExpressions (const ARegExpr : string;
 ASubExprs : TStrings; AExtendedSyntax : boolean (* {$IFDEF D4_}= False{$ENDIF} *)  ) : integer;
// Makes list of subexpressions found in ARegExpr r.e.
*****

***** P:\REGEXPR\RELEASES\0947 20011001\RegExpr.pas

uses
 Windows; // CharUpper/Lower

***** REGEXPR_FPC.PAS

//uses
// Windows; // CharUpper/Lower

*****

***** P:\REGEXPR\RELEASES\0947 20011001\RegExpr.pas
function ReplaceRegExpr (const ARegExpr, AInputStr, AReplaceStr : RegExprString;
      AUseSubstitution : boolean{$IFDEF D4_}= False{$ENDIF}) : RegExprString;
 var r : TRegExpr;
***** REGEXPR_FPC.PAS
function ReplaceRegExpr (const ARegExpr, AInputStr, AReplaceStr : RegExprString;
      AUseSubstitution : boolean (* {$IFDEF D4_}= False{$ENDIF} *) ) : RegExprString;
 var r : TRegExpr;
*****

***** P:\REGEXPR\RELEASES\0947 20011001\RegExpr.pas
function RegExprSubExpressions (const ARegExpr : string;
 ASubExprs : TStrings; AExtendedSyntax : boolean{$IFDEF D4_}= False{$ENDIF}) : integer;
 type
***** REGEXPR_FPC.PAS
function RegExprSubExpressions (const ARegExpr : string;
 ASubExprs : TStrings; AExtendedSyntax : boolean (* {$IFDEF D4_}= False{$ENDIF} *) ) : integer;
 type
*****

***** P:\REGEXPR\RELEASES\0947 20011001\RegExpr.pas
  WordChars := RegExprWordChars; //###0.929
  fInvertCase := RegExprInvertCaseFunction; //###0.927

***** REGEXPR_FPC.PAS
  WordChars := RegExprWordChars; //###0.929
  fInvertCase := InvertCase; //###0.927

*****

***** P:\REGEXPR\RELEASES\0947 20011001\RegExpr.pas
class function TRegExpr.InvertCaseFunction (const Ch : REChar) : REChar;
 begin
***** REGEXPR_FPC.PAS
class function TRegExpr.InvertCaseFunction (const Ch : REChar) : REChar;
Var
 ass: AnsiString;
 begin
*****

***** P:\REGEXPR\RELEASES\0947 20011001\RegExpr.pas
   begin
    Result := REChar (CharUpper (pointer (Ch)));
    if Result = Ch
     then Result := REChar (CharLower (pointer (Ch)));
   end;
 end; { of function TRegExpr.InvertCaseFunction
***** REGEXPR_FPC.PAS
   begin
    ass := UpperCase ( Ch );
    Result := ass[1];
    if Result = Ch
     then
      Begin
       ass := LowerCase ( Ch );
       Result := ass[1]
      End
   end
 end; { of function TRegExpr.InvertCaseFunction
*****

***** P:\REGEXPR\RELEASES\0947 20011001\RegExpr.pas

function TRegExpr.ExecPos (AOffset: integer {$IFDEF D4_}= 1{$ENDIF}) : boolean;
 begin
***** REGEXPR_FPC.PAS

function TRegExpr.ExecPos (AOffset: integer (* {$IFDEF D4_}= 1{$ENDIF} *) ) : boolean;
 begin
*****

***** P:\REGEXPR\RELEASES\0947 20011001\RegExpr.pas
function TRegExpr.Replace (AInputStr : RegExprString; const AReplaceStr : RegExprString;
      AUseSubstitution : boolean{$IFDEF D4_}= False{$ENDIF}) : RegExprString;
 var PrevPos : integer;
***** REGEXPR_FPC.PAS
function TRegExpr.Replace (AInputStr : RegExprString; const AReplaceStr : RegExprString;
      AUseSubstitution : boolean (* {$IFDEF D4_}= False{$ENDIF} *) ) : RegExprString;
 var PrevPos : integer;
*****

***** P:\REGEXPR\RELEASES\0947 20011001\RegExpr.pas
{$IFDEF reRealExceptionAddr}
 function ReturnAddr : pointer; //###0.938
  asm
***** REGEXPR_FPC.PAS
{$IFDEF reRealExceptionAddr}
 function ReturnAddr : LongInt; //###0.938
  asm
*****

