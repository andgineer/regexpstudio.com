<html><head><meta name="generator" content="Help & Manual 2.6.3"><title>What's New</title></head>
<body background="niceblue.gif" bgcolor="#FFFFFF">
<small><table width="100%"><tr><td align="right"><a href="tregexpr_disclaimer.htm"><img src="1arrow4.gif" border="0"></a><a href="tregexpr_installation.htm"><img src="1arrow5.gif" border="0"></a></td></tr></small><table width="100%" border="0" cellspacing="0" cellpadding="3" bgcolor="#C6E7FF"><tr><td align="left">
<font face="Arial" size="4" color="#000000"><font face="Arial" size="4" color="#0000FF"><b>What's New</b></font><font face="Arial" size="5" color="#000000"><font face="Arial" size="5" color="#0000FF"><b>
<br>
</b></font></font></font>

</td></tr></table><br>

<font face="Arial" size="3" color="#000000">Legend:
<br>
 (+) added feature
<br>
 (-) fixed bug
<br>
 (^) upgraded implementation
<br>

<br>
 v. 0.947 2001.10.03
<br>
<table border="0" cellpadding="0" cellspacing="0"><tr valign="top"><td width="14"><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></td><td><font face="Arial" size="3" color="#000000">(+) <a href="tregexpr_syntax.htm#syntax_word_boundaries">Word boundary</a> (\b &amp; \B) metachar
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></td><td><font face="Arial" size="3" color="#000000">(-) Bug in processing predefined char.classes in non-UseSetOfChar mode
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></td><td><font face="Arial" size="3" color="#000000">(+) Spanish help - translated by Diego Calp (mail@diegocalp.com), Argentina
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></td><td><font face="Arial" size="3" color="#000000">(+) <a href="tregexpr_interface.htm#tregexpr_version">VersionMajor/Minor</a> class method of TRegExpr ;)
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></td><td><font face="Arial" size="3" color="#000000">(-) Bug in CompileRegExpr, Thanks to Oleg Orlov &lt;orlov@diasoft.ru&gt;
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></td><td><font face="Arial" size="3" color="#000000">(^) Method RegExprSubExpressions wasn't compatible with D2-D3.
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"></font></td><td></td></tr></table><font face="Arial" size="3" color="#000000">  Thanks to Eugene Tarasov for bug report.
<br>
<table border="0" cellpadding="0" cellspacing="0"><tr valign="top"><td width="14"><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></font></td><td><font face="Arial" size="3" color="#000000">(+) <a href="tregexpr_interface.htm#tregexpr_replace">Method Replace</a> can now do substitution as well
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"></font></td><td></td></tr></table><font face="Arial" size="3" color="#000000">  Thanks to Warren Bare, Ken Friesen and many others who suggested it.
<br>
<table border="0" cellpadding="0" cellspacing="0"><tr valign="top"><td width="14"><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></font></td><td><font face="Arial" size="3" color="#000000">(+) Updated ReplaceRegExpr to use new Replace method functionality
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></td><td><font face="Arial" size="3" color="#000000">(^) Restored UniCode compatibility lost in some previous version
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"></font></td><td></td></tr></table><font face="Arial" size="3" color="#000000">  Thanks to Stephan Klimek for bug report
<br>
<table border="0" cellpadding="0" cellspacing="0"><tr valign="top"><td width="14"><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></font></td><td><font face="Arial" size="3" color="#000000">(^) Updated TestRE project, new examples for Replace with substitution included.
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"></font></td><td></td></tr></table><font face="Arial" size="3" color="#000000">
<br>

<br>
 v. 0.942+ 2001.03.01
<br>
<table border="0" cellpadding="0" cellspacing="0"><tr valign="top"><td width="14"><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></font></td><td><font face="Arial" size="3" color="#000000">(+) Published French help for TRegExpr, translated by Martin Ledoux, Quebec, Canada.
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"></font></td><td></td></tr></table><font face="Arial" size="3" color="#000000">
<br>
v. 0.942 2001.02.12
<br>
<table border="0" cellpadding="0" cellspacing="0"><tr valign="top"><td width="14"><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></font></td><td><font face="Arial" size="3" color="#000000">(-) Range-check error in DEMO-project (due to bug in RegExprSubExpressions), Thanks to Juergen Schroth
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></td><td><font face="Arial" size="3" color="#000000">(^) RegExprSubExpressions - added error codes for "unclosed "[" error
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></td><td><font face="Arial" size="3" color="#000000">(^) Help file bug fixing
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"></font></td><td></td></tr></table><font face="Arial" size="3" color="#000000">
<br>
 v. 0.941 2001.02.01
<br>
<table border="0" cellpadding="0" cellspacing="0"><tr valign="top"><td width="14"><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></font></td><td><font face="Arial" size="3" color="#000000">(^) Attension! Behaviour of '\w', '\W' was changed! Now it really  match alphanum characters and '_' as described in documentation,  not only alpha as it was before. Thanks to Vadim Alexandrov.
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"></font></td><td></td></tr></table><font face="Arial" size="3" color="#000000">  If You want to restore previous behaviour, reassign  RegExprWordChars (exclude '0123456789' from it).
<br>
<table border="0" cellpadding="0" cellspacing="0"><tr valign="top"><td width="14"><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></font></td><td><font face="Arial" size="3" color="#000000">(+) Full compatible with recommended at unicode.org implementation  of <a href="tregexpr_syntax.htm#modifier_m">modifier /m</a>, including DOS-styled line separators (\r\n) mixed  with Unix styled (\n) - see properties <a href="tregexpr_syntax.htm#lineseparators">LineSeparators</a>, LinePairedSeparator
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></td><td><font face="Arial" size="3" color="#000000">(^) Attension! Behaviour of '.' was changed! Now if <a href="tregexpr_syntax.htm#modifier_s">modifier /s</a> is off  it doesn't match all chars from <a href="tregexpr_syntax.htm#lineseparators">LineSeparators</a> and LinePairedSeparator (by  default \r and \n)
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></td><td><font face="Arial" size="3" color="#000000">(^) Attension! To prevent unneeded recompilation of r.e., now assignment  to Expression or changing modifiers doesn't cause immidiate [re]compilation.  So, now You don't get exception while assigning wrong expression, but can  get exception while calling Exec[Next], Substitute, Dump, etc if there  are errors in Expression or other properties.
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></td><td><font face="Arial" size="3" color="#000000">(+) Non-greedy style <a href="tregexpr_syntax.htm#metacharacters_iterators">iterators</a> (like '*?'), <a href="tregexpr_syntax.htm#modifier_g">modifier /g</a>.  Implemented with help from Matthew Winter and Filip Jirs&#225;k
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></td><td><font face="Arial" size="3" color="#000000">(+) <a href="tregexpr_syntax.htm#modifier_x">modifier /x</a> (eXtended syntax - allow formating r.e.)
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></td><td><font face="Arial" size="3" color="#000000">(+) Procedure Compile to [re]compile r.e. Usefull for GUI r.e. editors  and so on (to check all properties validity).
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></td><td><font face="Arial" size="3" color="#000000">(+) <a href="tregexpr_faq.htm">FAQ</a> in documentation. I am too tired to answer to the same  questions again and again :(
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></td><td><font face="Arial" size="3" color="#000000">(^) <a href="tregexpr_testrexp.htm">DEMO project</a> have been significantly improved. Now this is the  real r.e. debugger! Thanks to Jon Smith for his ideas.
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></td><td><font face="Arial" size="3" color="#000000">(+) function RegExprSubExpressions, usefull for GUI editors of  r.e. (see example of using in TestRExp.dpr project)
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></td><td><font face="Arial" size="3" color="#000000">(+) <a href="tregexpr_decorator.htm">HyperLinkDecorator</a> unit - practical example of TRegExpr using
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></td><td><font face="Arial" size="3" color="#000000">(-) Range checking error in some cases if ComplexBraces defined  Thanks to Juergen Schroth
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></td><td><font face="Arial" size="3" color="#000000">(^) 'ComplexBraces' now is defined by default
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></td><td><font face="Arial" size="3" color="#000000">(+) Kit Eason sent to me many examples for "<a href="tregexpr_syntax.htm">syntax</a>" help section and I decided to complitely rewrite this section. I hope, You'll enjoy the results ;)
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></td><td><font face="Arial" size="3" color="#000000">(+) The \A and \Z metacharacters are just like "^'' and "$'', except that they won't match multiple times when the <a href="tregexpr_syntax.htm#modifier_m">modifier /m</a> is used
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"></font></td><td></td></tr></table><font face="Arial" size="3" color="#000000">
<br>

<br>
 v. 0.938 2000.07.23
<br>
<table border="0" cellpadding="0" cellspacing="0"><tr valign="top"><td width="14"><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></font></td><td><font face="Arial" size="3" color="#000000">(^) Exeptions now jump to appropriate source line, not to Error procedure (I am not quite sure this is safe for all compiler versions (PLEASE, LET ME KNOW about any problems with this). You can turn it off - remove reRealExceptionAddr definition from regexpr.pas).
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></td><td><font face="Arial" size="3" color="#000000">(^) Forgotten BSUBEXP[CI] in FillFirstCharSet caused exeption 'memory corruption' in case if back reference can be first op, like this: (a)*\1 (first subexpression can be skipped and we'll start matching with back reference..).
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"></font></td><td></td></tr></table><font face="Arial" size="3" color="#000000">
<br>
 v. 0.937 2000.06.12
<br>
<table border="0" cellpadding="0" cellspacing="0"><tr valign="top"><td width="14"><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></font></td><td><font face="Arial" size="3" color="#000000">(-) Bug in optimization engine (since v.0.934). In some cases TRegExpr didn't catch right strings.
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"></font></td><td></td></tr></table><font face="Arial" size="3" color="#000000">     Thanks to Matthias Fichtner
<br>

<br>
 v. 0.936 2000.04.22
<br>
<table border="0" cellpadding="0" cellspacing="0"><tr valign="top"><td width="14"><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></font></td><td><font face="Arial" size="3" color="#000000">(+) Back references, like '&lt;font size=(['"]?)(\d+)\1&gt;' see <a href="tregexpr_syntax.htm">syntax description</a>
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></td><td><font face="Arial" size="3" color="#000000">(+) Wide hex char support, like '\x{263a}'
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"></font></td><td></td></tr></table><font face="Arial" size="3" color="#000000">
<br>
 v. 0.935 2000.04.19 (by Yury Finkel)
<br>
<table border="0" cellpadding="0" cellspacing="0"><tr valign="top"><td width="14"><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></font></td><td><font face="Arial" size="3" color="#000000">(-) fInvertCase now isn't readonly ;)
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></td><td><font face="Arial" size="3" color="#000000">(-) UniCode mode compiling errors
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"></font></td><td></td></tr></table><font face="Arial" size="3" color="#000000">
<br>
 v. 0.934 2000.04.17
<br>
<table border="0" cellpadding="0" cellspacing="0"><tr valign="top"><td width="14"><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></font></td><td><font face="Arial" size="3" color="#000000">(^) New ranges implementation (range matching now is very fast - uses one(!) CPU instruction)
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></td><td><font face="Arial" size="3" color="#000000">(^) Internal p-code structure converted into 32-bits - works faster and now there is no 64K limit for compiled r.e.
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></td><td><font face="Arial" size="3" color="#000000">(^)'{m,n}' now use 32-bits arguments (up to 2147483646) - specially for Dmitry Veprintsev ;)
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></td><td><font face="Arial" size="3" color="#000000">(^) Ranges now support metachars: [\n-\x0D] -&gt; #10,#11,#12,#13; Changed '-' processing, now it's like in Perl: [\d-t] -&gt; '0'..'9','-','t'; []-a] -&gt; ']'..'a'
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></td><td><font face="Arial" size="3" color="#000000">(-) Bug with \t and etc macro (they worked only in ranges) Thanks to Yury Finkel
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></td><td><font face="Arial" size="3" color="#000000">(^) Added new preprocessing optimization (see FirstCharSet). Incredible fast (!). But be carefull it isn's properly tested. You can switch it Off - remove UseFirstCharSet definition.
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></td><td><font face="Arial" size="3" color="#000000">(^) Many other speed optimizations
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></td><td><font face="Arial" size="3" color="#000000">(-) Case-insensitive mode now support system-defined national charset (due to bug in v.0.90 .. 0.926 supported only english one)
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></td><td><font face="Arial" size="3" color="#000000">(^) Case-insensitive mode implemented with InvertCase (param &amp; result of REChar type) - works 10 .. 100 times faster.
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></td><td><font face="Arial" size="3" color="#000000">(^) Match and ExecNext interfaces optimized, added IsProgrammOk by Ralf Junker
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></td><td><font face="Arial" size="3" color="#000000">(^) Increased max.subexpression number (NSUBEXP, now 15) and fixed code for this, now you can simply increase NSUBEXP constant by yourself. Suggested by Alexander V. Akimov.
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></td><td><font face="Arial" size="3" color="#000000">(^+) Substitute adapted for NSUBEXP &gt; 10 and significant (!) optimized, improved error checking.  ATTENTION! Read new Substitute description - syntax was changed !
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></td><td><font face="Arial" size="3" color="#000000">(+) SpaceChars &amp; WordChars property - now you may change chars treated as \s &amp; \w. By defauled assigned RegExprSpaceChars/WordChars
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></td><td><font face="Arial" size="3" color="#000000">(+) Now \s and \w supported in ranges
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></td><td><font face="Arial" size="3" color="#000000">(-) Infinite loop if end of range=#$FF Thanks to Andrey Kolegov
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></td><td><font face="Arial" size="3" color="#000000">(+) Function QuoteRegExprMetaChars (see description)
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></td><td><font face="Arial" size="3" color="#000000">(+) UniCode support - sorry, works VERY slow (remove '.' from {.$DEFINE UniCode} in regexpr.pas for unicode version). Implemented by Yury Finkel
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"></font></td><td></td></tr></table><font face="Arial" size="3" color="#000000">
<br>
 v. 0.926 2000.02.26
<br>
<table border="0" cellpadding="0" cellspacing="0"><tr valign="top"><td width="14"><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></font></td><td><font face="Arial" size="3" color="#000000">(-) Old bug derived from H.Spencer sources - SPSTART was set for '?' and '*' instead of '*', '{m,n}' and '+'.
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></td><td><font face="Arial" size="3" color="#000000">(-^) Now {m,n} works like Perl's one - error occures only if m &gt; n or n &gt; BracesMax (BracesMax = 255 in this version). In other cases (no m or nondigit symbols in m or n values,  or no '}') symbol '{' will be compiled as literal.  Note: so, you must include m value (use {0,n} instead of {,n}).  Note: {m,} will be compiled as {m,BracesMax}.
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></td><td><font face="Arial" size="3" color="#000000">(-^) CaseInsensitive mode now support ranges '(?i)[a]' == '[aA]'
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></td><td><font face="Arial" size="3" color="#000000">(^) Roman-number template in TestRExp ;)
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></td><td><font face="Arial" size="3" color="#000000">(+^) Beta version of complex-braces - like ((abc){1,2}|d){3} By default its turned off. If you want take part in beta-testing, please, remove '.' from {.$DEFINE ComplexBraces} in regexpr.pas.
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></td><td><font face="Arial" size="3" color="#000000">(-^) Removed \b metachar (in Perl it isn't BS as in my implementation,  but word bound)
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></td><td><font face="Arial" size="3" color="#000000">(+) Add /s modifier. But I am not sure that it's ok for Windows. I implemented it as [^\n] for '.' metachar in non-/s mode. But lines separated by \n\r in windows. I need you suggestions !
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></td><td><font face="Arial" size="3" color="#000000">(^) Sorry, but I had to rename Modifiers to ModifierStr (ModifierS uses for /s now)
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"></font></td><td></td></tr></table><font face="Arial" size="3" color="#000000">
<br>
 v. 0.91 2000.02.02
<br>
<table border="0" cellpadding="0" cellspacing="0"><tr valign="top"><td width="14"><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></font></td><td><font face="Arial" size="3" color="#000000">(^) some changes in documentation and demo-project.
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"></font></td><td></td></tr></table><font face="Arial" size="3" color="#000000">
<br>
 v. 0.90 2000.02.01
<br>
(+) implemented braces repetitions {min,max}. Sorry - only simple cases now - like '\d{2,3}' or '[a-z1-9]{,7}', but not (abc){2,3} .. I still too short in time. Wait for future versions of TRegExpr or
<br>
     implement it by youself and share with me ;)
<br>
<table border="0" cellpadding="0" cellspacing="0"><tr valign="top"><td width="14"><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></font></td><td><font face="Arial" size="3" color="#000000">(+) implemented case-insensitive modifier and way to work with other modifiers - see properties     Modifiers, ModifierR, ModifierI and <a href="tregexpr_syntax.htm#inline_modifiers">(?ismxr-ismxr) </a>Perl extension. You may use global variables <a href="tregexpr_interface.htm#modifier_defs">RegExpr*</a> for assigning  default modifier values.
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></td><td><font face="Arial" size="3" color="#000000">(+) property ExtSyntaxEnabled changed to 'r'-modifier (russian extensions - <a href="tregexpr_syntax.htm#modifier_r">see documentation</a>)
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></td><td><font face="Arial" size="3" color="#000000">(+) implemented <a href="tregexpr_syntax.htm#inline_comment">(?#comment) </a>Perl extension - very hard and usefull work ;)
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></td><td><font face="Arial" size="3" color="#000000">(^) property MatchCount renamed to <a href="tregexpr_interface.htm#subexprmatchcount">SubExprMatchCount</a>. Sorry for any inconvenients, but it's because new version works slightly different and if you used MatchCount in your programms you have to rethink it ! (see comments to this property)
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></td><td><font face="Arial" size="3" color="#000000">(+) add InputString property - stores input string from last Exec call. You may directly assign values to this property for using in ExecPos method.
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></td><td><font face="Arial" size="3" color="#000000">(+) add ExecPos method - for working with assigned to InputString property. You may use it like this <i>InputString := AString;</i><font face="Arial" size="3" color="#7F0000"><b> </b></font></font><font face="Arial" size="3" color="#000000"><i>ExecPos;</i> or this <i>InputString := AString; ExecPos (AOffset);</i> Note: ExecPos without parameter works only in Delphi 4 or higher.
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></td><td><font face="Arial" size="3" color="#000000">(+) add ExecNext method - simple and fast (!) way to finding multiple occurences of r.e. in big input string.
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></td><td><font face="Arial" size="3" color="#000000">(^) Offset parameter removed from Exec method, if you used it in your programs, please replace all <i>Exec (AString, AOffset)</i> with combination <i>InputString := AString; ExecPos (AOffset)</i><font face="Arial" size="3" color="#7F0000"><b> </b></font></font><font face="Arial" size="3" color="#000000">Sorry for any inconvenients, but old design (see v.0.81) was too ugly :( In addition, multiple Exec calls with same input string produce fool overhead because each Exec reallocate input string buffer.
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></td><td><font face="Arial" size="3" color="#000000">(^) optimized implementation of Substitution, Replace and Split methods
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></td><td><font face="Arial" size="3" color="#000000">(-) fixed minor bug - if r.e. compilation raise error during second pass (!!! I think it's impossible in really practice), TRegExpr stayed in 'compiled' state.
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></td><td><font face="Arial" size="3" color="#000000">(-) fixed bug - Dump method didn't check program existance and raised 'access violation' if previouse Exec was finished with error.
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></td><td><font face="Arial" size="3" color="#000000">(+) changed error handling (see functions Error, ErrorMsg, LastError, property CompilerErrorPos, type ERegExpr).
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></td><td><font face="Arial" size="3" color="#000000">(-^) TRegExpr.Replace, Split and ExecNext made a infinite loop in case of r.e. match empty-string. Now ExecNext moves by MatchLen if MatchLen &lt;&gt; 0  and by +1 if MatchLen = 0 Thanks to Jon Smith and George Tasker for bugreports.
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></td><td><font face="Arial" size="3" color="#000000">(-) While playing with null-matchs I discovered, that null-match at tail of input string is never found. Well, I fixed this, but I am not sure this is safe (MatchPos[0]=length(AInputString)+1, MatchLen = 0). Any suggetions are very appreciated.
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></td><td><font face="Arial" size="3" color="#000000">(^) Demo project and documentation was upgraded
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></font></td><td><font face="Arial" size="3" color="#000000">(^) Documentation and this version was published on my home page <a href="http://anso.da.ru" TARGET="_top">http://anso.da.ru</A> (http://anso.virtualave.net)
&nbsp;<br>
</font></td></tr><tr valign="top"><td><font face="Arial" size="3" color="#000000"></font></td><td></td></tr></table><font face="Arial" size="3" color="#000000">
<br>
 v. 0.81 1999.12.25 // Merry Christmas ! :)
<br>
 -=- added \s (AnySpace) and \S (NotSpace) meta-symbols
<br>
     - implemented by Stephan Klimek with minor fixes by AVS
<br>
 -=- added \f, \a and \b chars (translates into FF, BEL, BS)
<br>
 -=- removed meta-symbols '&#161;' &amp; '&#227;' - sorry for any inconvenients
<br>
 -=- added Match property (== copy (InputStr, MatchPos [Idx], MatchLen [Idx]))
<br>
 -=- added extra parameter Offset to Exec method
<br>
     (thanks to Steve Mudford)
<br>

<br>
 v. 0.7 1999.08.22
<br>
 -=- fixed bug - in some cases the r.e. [^...]
<br>
     incorrectly processed (as any symbol)
<br>
     (thanks to Jan Korycan)
<br>
 -=- Some changes and improvements in TestRExp.dpr
<br>

<br>
 v. 0.6 1999.08.13 (Friday 13 !)
<br>
 -=- changed header of TRegExpr.Substitute
<br>
 -=- added Split, Replace &amp; appropriate
<br>
     global wrappers (thanks to Stephan Klimek for suggetions)
<br>

<br>
 v. 0.5 1999.08.12
<br>
 -=- TRegExpr.Substitute routine added
<br>
 -=- Some changes and improvements in TestRExp.dpr
<br>
 -=- Fixed bug in english version of documentation
<br>
     (Thanks to Jon Buckheit)
<br>

<br>
 v. 0.4 1999.07.20
<br>
 -=- Fixed bug with parsing of strings longer then 255 bytes
<br>
     (thanks to Guido Muehlwitz)
<br>
 -=- Fixed bug in RegMatch - mathes only first occurence of r.e.
<br>
     (thanks to Stephan Klimek)
<br>

<br>
 v. 0.3 1999.06.13
<br>
 -=- ExecRegExpr function
<br>

<br>
 v. 0.2 1999.06.10
<br>
 -=- packed into object-pascal class
<br>
 -=- code slightly rewriten for pascal
<br>
 -=- now macro correct proceeded in ranges
<br>
 -=- r.e.ranges syntax extended for russian letters ranges:
<br>
     &#240;-&nbsp; - replaced with all small russian letters (Win1251)
<br>
     L-- - replaced with all capital russian letters (Win1251)
<br>
     &#240;-- - replaced with all russian letters (Win1251)
<br>
 -=- added macro '\d' (opcode ANYDIGIT) - match any digit
<br>
 -=- added macro '\D' (opcode NOTDIGIT) - match not digit
<br>
 -=- added macro '\w' (opcode ANYLETTER) - match any english letter or '_'
<br>
 -=- added macro '\W' (opcode NOTLETTER) - match not english letter or '_'
<br>
 (all r.e.syntax extensions may be turned off by flag ExtSyntax)
<br>

<br>
 v. 0.1 1999.06.09
<br>
 first version, with bugs, without help =&gt; must die :(
<br>

<br>
</font></font>

<small><table width="100%"><tr><td align="right"><a href="tregexpr_disclaimer.htm"><img src="1arrow4.gif" border="0"></a><a href="tregexpr_installation.htm"><img src="1arrow5.gif" border="0"></a></td></tr></small>

<script>     (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){                 (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),             m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)     })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');      ga('create', 'UA-90368520-1', 'auto');     ga('send', 'pageview');  </script>

</body></html>
