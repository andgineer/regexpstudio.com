<html><head><meta name="generator" content="Help & Manual 2.6.3"><title>���������</title></head>
<body background="niceblue.gif" bgcolor="#FFFFFF">
<small><table width="100%"><tr><td align="right"><a href="tregexpr_syntax.htm"><img src="1arrow4.gif" border="0"></a><a href="tregexpr_testrexp.htm"><img src="1arrow5.gif" border="0"></a></td></tr></small><table width="100%" border="0" cellspacing="0" cellpadding="3" bgcolor="#BBE0FF"><tr><td align="left">
<font face="Arial" size="4" color="#000000"><font face="Arial" size="4" color="#0000FF"><b>���������</b></font><font face="Arial" size="5" color="#000000"><font face="Arial" size="5" color="#0000FF"><b>
<br>
</b></font></font></font>

</td></tr></table><br>

<font face="Arial" size="3" color="#000000"><font face="Arial" size="3" color="#0000FF"><b>������ � ��������</b></font><font face="Arial" size="3" color="#000000"><font face="Arial" size="3" color="#0000FF"><b> TRegExpr</b></font></font><font face="Arial" size="3" color="#000000">:
<br>

<br>
<b><a name="tregexpr_version">class function VersionMajor</b> : integer;
<br>
<b>class function VersionMinor</b> : integer;
<br>
���������� �������������� ������� � ������� ����� ������, ��������, ��� v. 0.944 VersionMajor = 0 � VersionMinor = 944
<br>

<br>
<b>property Expression</b> : string;
<br>
���������� ���������� ���������.
<br>
��� ��������� ������ TRegExpr ������������� ��������� ���������� ��������� �� ���������� ������������� (��� ����� ���������� ����� Dump).
<br>
������, �������� ��� ������ �����, ����� ��� ������� ����������, �.�. ��� ��������� � ������� Exec[Next], Substitute, Dump � �.�. � ������ � ��� ������, ���� ����� ��������� [����]���������� ���� �������� �������� Expression ��� �����-���� ������ �������� �� ����������������� ��������� ��������.
<br>
��� ������� ���������� ���������� ����� Error (�� ��������� �� ���������� ���������� ERegExpr - ��. ����)
<br>

<br>
<b>property Modifier</b><b>Str</b> : string;
<br>
�������� � ��������� <a href="tregexpr_syntax.htm#about_modifiers">�������������</a> � ������� ������ � ��� �� �������, ��� � � ����������� <a href="tregexpr_syntax.htm#inline_modifiers">(?ismx-ismx)</a>. �.�., �������� ModifierStr := 'i-x' ������� ��������-����������� ����� � �������� ����� ������������ ����������, ������ ������������ ��������� ��� ���������. 
<br>
���� ������� �������������� �����������, ���������� Error
<br>

<br>
<b><a name="tregexpr_modifier_i">property ModifierI</b> : boolean;
<br>
<a href="tregexpr_syntax.htm#modifier_i">����������� /i</a> - ("��������-����������� �����"), ���������������� �� <a href="tregexpr_interface.htm#modifier_defs">RegExprModifierI</a>
<br>

<br>
<b><a name="tregexpr_modifier_r">property ModifierR</b> : boolean;
<br>
<a href="tregexpr_syntax.htm#modifier_r">����������� /r</a> ("������� ���������"), ���������������� �� <a href="tregexpr_interface.htm#modifier_defs">RegExprModifierR</a>
<br>

<br>
<b><a name="tregexpr_modifier_s">property ModifierS</b> : boolean
<br>
<a href="tregexpr_syntax.htm#modifier_s">����������� /s</a> - ���� ����������, �� '.' ��������� � ����� ��������, (���� �������, �� '.' �� ��������� � <a href="tregexpr_interface.htm#lineseparators">LineSeparators</a> � <a href="tregexpr_interface.htm#linepairedseparator">LinePairedSeparator</a>, , ���������������� �� <a href="tregexpr_interface.htm#modifier_defs">RegExprModifierS</a>
<br>

<br>
<b><a name="tregexpr_modifier_g">property ModifierG</b> : boolean;
<br>
<a href="tregexpr_syntax.htm#modifier_g">����������� /g</a>, ���������� �������� � ����, ��� ��� ��������� �������� � "�� ������" (non-greedy) ������, �.�. ����� ModifierG = False, �� ��� '*' �������� ��� '*?', ��� '+' ��� '+?' � �.�.., ���������������� �� <a href="tregexpr_interface.htm#modifier_defs">RegExprModifierG</a>
<br>

<br>
<b><a name="tregexpr_modifier_m">property ModifierM</b> : boolean;
<br>
<a href="tregexpr_syntax.htm#modifier_m">����������� /m</a> -������������ ������� ����� ��� �������������. ���� ��������, �� ����������� `^' � `$' "�����������" ������ � ������ � ����� �������� ������.
<br>
���� �������, �� ��� ������� ����������� ����� � � ������ � � ����� ������ ������ �������� ������., ���������������� �� <a href="tregexpr_interface.htm#modifier_defs">RegExprModifierM</a>
<br>

<br>
<b><a name="tregexpr_modifier_x">property ModifierX</b> : boolean;
<br>
<a href="tregexpr_syntax.htm#modifier_x">����������� /x</a> - ("����������� ���������"), ���������������� �� <a href="tregexpr_interface.htm#modifier_defs">RegExprModifierX</a>
<br>

<br>
<b>function Exec</b> (const AInputString : string) : boolean;
<br>
��������� ��������� ������������� � ������� ������ AInputString
<br>
!!! �����, ���������� AInputString � ��������� InputString
<br>

<br>
<b>function ExecNext</b> : boolean;
<br>
����� ���������� ����������. ����������:
<br>
    Exec (AString); ExecNext;
<br>
 �������� �� �� ��� �
<br>
    Exec (AString);
<br>
    if MatchLen [0] = 0 then ExecPos (MatchPos [0] + 1) 
<br>
     else ExecPos (MatchPos [0] + MatchLen [0]);
<br>
 �� �������������� ������� ���������!
<br>

<br>
<b>function ExecPos</b> (AOffset: integer = 1) : boolean;
<br>
��������� ��������� ��� ������ � InputString ������� � ������� AOffset
<br>
(AOffset=1 - ������ ������ InputString)
<br>

<br>
<b>property InputString</b> : string;
<br>
������� ������� ������ (����������� ���� ��� � ��������� Exec).
<br>
���������� ����� �������� �������� ������ ��������������� �������� Match* !
<br>

<br>
<b><a name="tregexpr_substitute">function Substitute</b> (const ATemplate : string) : string;
<br>
���������� ATemplate � ������� ��� '$&amp;' � '$0' �������� �� ��������� ���������� ���������, � '$n' �������� �� ������������ #n.
<br>
������� � ������ v.0.929 ������������ '$' ������ '\' (��� ���������� ���� \n\r � �.�. � ����� ��� ������� �������� � Perl) � ����������� n &gt; 9.
<br>
���� ��� ��������� ������ ������ '$' ��� '\', ����������� �� '\'.
<br>
��������: '1\$ is $2\\rub\\' -&gt; '1$ is &lt;Match[2]&gt;\rub\'
<br>
���� ��� ���������� ����� ����� '$n' ��������� �����, ���������� n � �������� ������ '{}'.
<br>
��������: 'a$12bc' -&gt; 'a&lt;Match[12]&gt;bc', 'a${1}2bc' -&gt; 'a&lt;Match[1]&gt;2bc'.
<br>

<br>
<b>procedure Split</b> (AInputStr : string; APieces : TStrings);
<br>
����� ������� ������ AInputStr �� ���������� � APieces ����� ����������� ����������� ���������. ��������! ���� ����� �������� ������ Exec[Next]
<br>

<br>
<a name="tregexpr_replace">function Replace (AInputStr : RegExprString;
<br>
  const AReplaceStr : RegExprString;
<br>
  AUseSubstitution : boolean = False) : RegExprString;
<br>
�������� � AInputStr ��� ��������� ��������� �� AReplaceStr
<br>
���� AUseSubstitution = true, �� AReplaceStr ����� �������������� ��� ������ ��� ������ Substitution.
<br>
 ��������:
<br>
  Expression := '({-i}block|var)\s*\(\s*([^ ]*)\s*\)\s*';
<br>
  Replace ('BLOCK( test1)', 'def "$1" value "$2"', True);
<br>
   ������:  def 'BLOCK' value 'test1'
<br>
  Replace ('BLOCK( test1)', 'def "$1" value "$2"', False)
<br>
   ������:  def "$1" value "$2"
<br>
��������! ���� ����� �������� ������ Exec[Next]
<br>

<br>

<br>

<br>
<b><a name="subexprmatchcount">property SubExprMatchCount</b> : integer; // ReadOnly
<br>
����� ������������, ��������� � ��������� Exec*. ���� ������� ������ ���� ��������� � �����, �� SubExprMatchCount=0, ���� � ���� ��������� �� ������� (Exec* ������ false) �� SubExprMatchCount=-1. �������� ��������, ��� ����� ������������ ����� ���� �� ������� � ��� ��� MathPos=MatchLen=-1 � Match=''.
<br>
��������, ��� Expression := '(1)?2(3)?';
<br>
Exec ('123'): SubExprMatchCount=2, Match[0]='123', [1]='1', [2]='3'
<br>
Exec ('12'): SubExprMatchCount=1, Match[0]='12', [1]='1'
<br>
Exec ('23'): SubExprMatchCount=2, Match[0]='23', [1]='', [2]='3'
<br>
Exec ('2'): SubExprMatchCount=0, Match[0]='2'
<br>
Exec ('7') - ���������� False: SubExprMatchCount=-1
<br>

<br>
<b>property MatchPos</b> [Idx : integer] : integer; // ReadOnly
<br>
������� ������ ������������ #Idx �� ������� ������
<br>
������ ������������ ����� Idx=1, ��������� - MatchCount, ��������� � �����  Idx=0.
<br>
���������� -1 ���� ��� ������ ������������ ��� ���� ��� �� ������� �� ������� ������.
<br>

<br>
<b>property MatchLen</b> [Idx : integer] : integer; // ReadOnly
<br>
����� ������������ #Idx �� ������� ������
<br>
������ ������������ ����� Idx=1, ��������� - MatchCount, ��������� � �����  Idx=0.
<br>
���������� -1 ���� ��� ������ ������������ ��� ���� ��� �� ������� �� ������� ������.
<br>

<br>
<b><a name="tregexpr_match">property Match</b> [Idx : integer] : string; // ReadOnly
<br>
== copy (InputString, MatchPos [Idx], MatchLen [Idx])
<br>
���������� '' ���� ��� ������ ������������ ��� ���� ��� �� ������� �� ������� ������.
<br>

<br>
<b>function LastError</b> : integer;
<br>
��� ��������� ������, 0 ���� ��� ������ (������������ ������������ ��� �������, ���� �� �� ��������� ���������� Error, ��������� ������� ���������� ���������� �������������� ��������).
<br>
����� ���� ������� ������� ���������� ���������� � ��������� ����� ������ ������ 0.
<br>

<br>
<b>function ErrorMsg</b> (AErrorID : integer) : string; virtual;
<br>
���������� ����� ��������� �� ������ � ����� AErrorID.
<br>

<br>
<b>property CompilerErrorPos</b> : integer; // ReadOnly
<br>
���������� �������, � ������� ��������� ��������� ������ ���������� (�������� ������� ���������)
<br>

<br>
<b>property <a name="tregexpr_spacechars">SpaceChars</b> : RegExprString
<br>
�������� �������, ���������� ��� \s (���������������� �� ���������� ��������� RegExprSpaceChars)
<br>

<br>
<b>property <a name="tregexpr_wordchars">WordChars</b> : RegExprString;
<br>
�������� �������, ���������� ��� \w (���������������� �� ���������� ��������� RegExprWordChars)
<br>

<br>
<b>property <a name="lineseparators">LineSeparators</b> : RegExprString
<br>
����������� ����� (��������, \n ��� Unix) (���������������� �� ���������� ��������� RegExprLineSeparators)
<br>
<a href="tregexpr_syntax.htm#syntax_line_separators">��.��������� � ������������ �����</a>
<br>

<br>
<b>property <a name="linepairedseparator">LinePairedSeparator</b> : RegExprString
<br>
��������� ����������� ����� (���, \r\n ��� DOS � Windows) (���������������� �� ���������� ��������� RegExprLinePairedSeparator)
<br>
<a href="tregexpr_syntax.htm#syntax_line_separators">��.��������� � ������������ �����</a>
<br>

<br>
��������, ���� ��� ���������� ����������� ������ Unix-����������� �����, ��������� LineSeparators := #$a (������ ����� ������) � LinePairedSeparator := '' (������ ������), ���� ���������� ������������ ��� ����������� ����� ������ \x0D\x0A �� �� ��������� \x0D ��� \x0A, ��������� LineSeparators := '' (������ ������) � LinePairedSeparator := #$d#$a.
<br>

<br>
�� ��������� ������������ "��������� �������" (�� ���������������� ��������� RegExprLine[Paired]Separator[s]): LineSeparators := #$d#$a; LinePairedSeparator := #$d#$a �������� ��������� � <a href="tregexpr_syntax.htm#syntax_line_separators">�������� ����������</a>.
<br>

<br>
<b>class function InvertCaseFunction</b>  (const Ch : REChar) : REChar;
<br>
����������� ������ Ch � ������� ������� ���� ��� ������ ������� �������� � � ������ - ���� �������� (������������ ������� ��������� ������������ �������)
<br>

<br>
<b><a name="invertcase">property InvertCase</b> : TRegExprInvertCaseFunction;
<br>
��������� ���������� ���� ����������� ���������� <a href="tregexpr_syntax.htm#modifier_i">��������-������������</a> ������ ������ TRegExpr. ���������������� �� ���������� ��������� RegExprInvertCaseFunction (�� ��������� ��� ��������� �� InvertCaseFunction)
<br>

<br>
<b>procedure Compile</b>;
<br>
�������� �������������� [����]����������  ����������� ���������.
<br>
����� ���� ��������, ��������, ��� �������� ������������ ���� ������� ��� �������� ���������� ���������� ���.��������� � �.�.
<br>

<br>
<b>function Dump</b> : string;
<br>
���������� ���������� ������ � ������� ���� ��������������� ���������. ������������� ��� ����� �������������� ;)
<br>

<br>

<br>
<font face="Arial" size="3" color="#0000FF"><b>���������� ���������</b></font></font><font face="Arial" size="3" color="#000000"><font face="Arial" size="3" color="#0000FF"><b>
<br>
</b></font></font><font face="Arial" size="3" color="#000000">
<br>
<a name="modifier_defs">�������� �� ��������� ��� �������������:
<br>
  <b>RegExprModifierI</b><font face="Arial" size="3" color="#7F0000"><b> </b></font></font><font face="Arial" size="3" color="#000000">: boolean = False;&nbsp;&nbsp;&nbsp;// <a href="tregexpr_interface.htm#tregexpr_modifier_i">TRegExpr.ModifierI</a>
<br>
  <b>RegExprModifierR</b> : boolean = True;&nbsp;&nbsp;&nbsp;// <a href="tregexpr_interface.htm#tregexpr_modifier_r">TRegExpr.ModifierR</a>
<br>
  <b>RegExprModifierS</b> : boolean = True;&nbsp;&nbsp;&nbsp;// <a href="tregexpr_interface.htm#tregexpr_modifier_s">TRegExpr.ModifierS</a>
<br>
  <b>RegExprModifierG</b> : boolean = True;&nbsp;&nbsp;&nbsp;// <a href="tregexpr_interface.htm#tregexpr_modifier_g">TRegExpr.ModifierG</a>
<br>
  <b>RegExprModifierM</b> : boolean = False;&nbsp;&nbsp;&nbsp;// <a href="tregexpr_interface.htm#tregexpr_modifier_m">TRegExpr.ModifierM</a>
<br>
  <b>RegExprModifierX</b> : boolean = False;&nbsp;&nbsp;&nbsp;// <a href="tregexpr_interface.htm#tregexpr_modifier_x">TRegExpr.ModifierX</a>
<br>

<br>
  <b>RegExprSpaceChars</b> : RegExprString // �������� �� ��������� ��� SpaceChars
<br>
    = ' '#$9#$A#$D#$C;
<br>

<br>
  <b>RegExprWordChars</b> : RegExprString // �������� �� ��������� ��� WordChars
<br>
   =  '0123456789'
<br>
  + 'abcdefghijklmnopqrstuvwxyz'
<br>
  + 'ABCDEFGHIJKLMNOPQRSTUVWXYZ_';
<br>

<br>
  <b>RegExprLineSeparators</b> : RegExprString // �������� �� ��������� ��� LineSeparators
<br>
   =  #$d#$a{$IFDEF UniCode}#$b#$c#$2028#$2029#$85{$ENDIF};
<br>
  <b>RegExprLinePairedSeparator</b> : RegExprString // �������� �� ��������� ��� LinePairedSeparator
<br>
   = #$d#$a;
<br>

<br>
  <b>RegExpr</b><b>Invert</b><b>CaseFunction</b> : TRegExprInvertCaseFunction // �������� �� ��������� ��� InvertCase
<br>
 = TRegExpr.InvertCaseFunction; 
<br>

<br>

<br>
<font face="Arial" size="3" color="#0000FF"><b>���������� �������</b></font></font><font face="Arial" size="3" color="#000000">
<br>

<br>
<b>function ExecRegExpr</b> (const ARegExpr, AInputStr : string) : boolean;
<br>
true ���� ������ AInputString ��������� � ���������� ARegExpr
<br>
! ��� ������� � ARegExpr ����� ������������ exception
<br>

<br>
<b>procedure SplitRegExpr</b> (const ARegExpr, AInputStr : string; APieces : TStrings);
<br>
����� AInputStr �� ���������� � APieces ����� �� ���������� ��������� ARegExpr (��������, ��������� ������ �� ��������� ����, ����������� ����� ������������������� ��������)
<br>

<br>
<b>function ReplaceRegExpr</b> (const ARegExpr, AInputStr, AReplaceStr : string;
<br>
 AUseSubstitution : boolean = False) : string;
<br>
���������� AInputStr � ������� ��� ��������� ��������� ARegExpr �������� �� AReplaceStr. ���� AUseSubstitution = true, �� AReplaceStr ����� �������������� ��� ������ ��� Substitution:
<br>
 ReplaceRegExpr ('({-i}block|var)\s*\(\s*([^ ]*)\s*\)\s*',
<br>
  'BLOCK( test1)', 'def "$1" value "$2"', True)
<br>
 ����������:  def 'BLOCK' value 'test1'
<br>
 ReplaceRegExpr ('({-i}block|var)\s*\(\s*([^ ]*)\s*\)\s*',
<br>
  'BLOCK( test1)', 'def "$1" value "$2"')
<br>
 ����������:  def "$1" value "$2"
<br>

<br>
<b>function Quot</b><b>e</b><b>RegExprMetaChars</b> (const AStr : string) : string;
<br>
�������� ��� ����������� �� ������� ������ ���, ����� �� ����� ���� ��������� ������������ ������ ����������� ���������. 
<br>
�������� 'abc$cd.(' ������������� � 'abc\$cd\.\('
<br>
��� ������� ������� ��� ��������������� ������� ����������� ��������� �� ��������� ���������������� ������
<br>

<br>
<b>function RegExprSubExpressions</b> (const ARegExpr : string;
<br>
 ASubExprs : TStrings; AExtendedSyntax : boolean = False) : integer;
<br>
������� ������ ��������� � ���.��������� ARegExpr ������������
<br>
������� ������������ ������������� ������� � ASubExps, ���
<br>
  String - �������� ����� ������������ (��� ����������� '()')
<br>
  ��.����� Object - ��������� ������� ������������ �  ARegExpr, ������� ����������� '(' ���� �� ����!
<br>
  ��.����� Object - ����� ������������, ������� '(' � ')' ���� ��� ����!
<br>
AExtendedSyntax - ������ ���� True ���� ����������� /x ����� ������� ��� ������������� ������� ����������� ���������.
<br>
��� ������� ������� ��� ��������� ���������� ���������� ���.��������� � �.�. ������ ������������� ���� � <a href="tregexpr_testrexp.htm">TestRExp.dpr</a>
<br>

<br>
<b>���������</b>&nbsp;&nbsp;&nbsp;<b>�����������</b>
<br>
</font><font face="Arial" size="2" color="#000000"><hr></font><font face="Arial" size="3" color="#000000">
<br>
<b>0</b> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;�����. ��� ������ ��������������;
<br>
<b>-1</b> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;�� ������� ��� ������� ����� ����������� ������ ')';
<br>
<b>-(n+1)</b> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;� ������� n ��������� ���������� '[';
<br>
<b>n</b> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;� ������� n ���������� ����������� ')' ��� ������� ��� ����������� '('.
<br>

<br>
���������� 0 ���� ��� ������ ��������������, ��� -1 ���� ������������ ����������� ������ ')', ��� n ���� � ������� n ��������� ����������� ������ ')' ������� �� ������������� �� ���� ����������� '('.
<br>
�����������, ���� Result &lt;&gt; 0, �� ASubExprs ����� ���� �����������.
<br>

<br>

<br>
<font face="Arial" size="3" color="#0000FF"><b>��� ������������� ��� ������� Exception</b></font></font><font face="Arial" size="3" color="#000000">
<br>

<br>
���������� ������ TRegExpr �� ��������� (�� ������ ������ ��� ��������� � �������� ��� ���������) ���������� exception:
<br>

<br>
<b>ERegExpr</b> = class (Exception)
<br>
   public
<br>
    ErrorCode : integer; // ��� ������. ������ ���������� ��������� ������ 1000, ��� ��������� �� �������� �� ������ ���������� ���������.
<br>
    CompilerErrorPos : integer; // ������� � ��������� ��� ��������� ��������� ������ ���������� ���������
<br>
  end;
<br>

<br>

<br>
<font face="Arial" size="3" color="#0000FF"><b><a name="unicode_support">��� ������������ Unicode</b></font></font><font face="Arial" size="3" color="#000000">
<br>

<br>
TRegExpr ������ ������������ ������ � UniCode.
<br>

<br>
�������� ��������, ��� ���� ����� ����������� ��������������� � �������� <b>����������� ��������</b> (�� ��������� �� ����������� �������).
<br>
����������� ��� ������ ���� ��� ������������� �� �������� ��� UniCode (� ����� ������� ������� � ���������� TRegExpr � ������������� UniCode-�����).
<br>

<br>
����� ����������� TRegExpr �� ������ � unicode ������� '.' �� {.$DEFINE UniCode} � ����� regexpr.pas.
<br>
��� ������ ����� ����� ����� �������������� ��� WideString.
<br>

<br>
</font></font>

<small><table width="100%"><tr><td align="right"><a href="tregexpr_syntax.htm"><img src="1arrow4.gif" border="0"></a><a href="tregexpr_testrexp.htm"><img src="1arrow5.gif" border="0"></a></td></tr></small>

<script>     (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){                 (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),             m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)     })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');      ga('create', 'UA-90368520-1', 'auto');     ga('send', 'pageview');  </script>

</body></html>
