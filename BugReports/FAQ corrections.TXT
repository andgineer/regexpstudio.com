=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
From:    Tom.corcoran <tom.corcoran@moonbade.plus.com>
To:      anso@mail.ru <anso@mail.ru>
Date:    Thursday, July 1, 2004, 3:34:55 PM
Subject: FAQ corrections
Files:   <none>
--====----====----====----====----====----====----====----====----====----===--
Hi Andrey,
 
I am trying a regular expression replace, the string is found but not replaced.
This example works with a regular expression utility that I use outside Delphi:
 
var
  RegExp : TRegExpr;
  NewValue : string
 
  RegExp            := TRegExpr.Create;
  RegExp.Expression := '\#\$D\#\$A';
  RegExp.ModifierI  := True;  // case insensitive
 
  NewValue := RegExp.Replace('first line'#$D#$A#$D#$A'second line after
blank'#$D#$A#$D#$A'third line after blank'#$D#$A,
                             '%0D%0A',
                             True);
 
If you have a spare few minutes I would appreciate any advice on how to make this
work.
 
Here are some spelling corrections from your faq page :
 
- "I recieve such a questions" correct = "receive" (rule is i before e except
after c)
- "has special treting in C++" correct = "treating", although "meaning" would
read better
- "sligtly unusual but more readable" correct = "slightly"
- "applyed to string" correct = "applied"
- "properties or constractions like" / "there are many constractions" correct =
"constructions"
- "performes optimization search" correct = "performs"
- "multiple matchs" correct = "matches"
- "It cannot be done more easily becase of Dalphi isn't interpretator as Perl
(and it's benefit - interpretator work very slow!)" correct spellings and grammer
= "It cannot be done more easily because Delphi isn't an interpreter like Perl
(but it's benefit is interpreters work very slow!)" 
- " because of perfomance and" correct = "performance"
 
 
Corrected paragraphs :
 
"This is the limitation of the use of TRegExpr (and Perl's and many Unix regular
expressions) mathematics - r.e. perform only 'simple' search optimization, and do
not try to do the best optimization. In some cases this is bad, but generally
it's more advantageous then limiting - because of performance and predictability
reasons."
 
"The main rule - the r.e. first of all tries to match from the current place and
only if it's completely impossible does it move forward by one char and try again
from that place. So, if You use 'a,b+?' it matches 'a,b', but in case of
'a+?,b+?' it's 'not recommended' (due to non-greediness) but it's possible to
match more then one 'a', so TRegExpr does it and at obtains correct (but non
optimum) match. TRegExpr, like Perl's or Unix's r.e., doesn't attempt to move
forward and check - would it be 'better' match. Moreover, it cannot be compared
in terms of 'more or less good match' at all."
 
Cheers, Tom.
 

 

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

