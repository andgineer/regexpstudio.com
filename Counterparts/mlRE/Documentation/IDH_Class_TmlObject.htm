<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>
<HEAD>
<META NAME="GENERATOR" Content="Time2HELP 1.0; Standard Template">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html;CHARSET=iso-8859-1">
<TITLE>TmlObject Class</TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF"><Font Face="Verdana">
<BASEFONT NAME="verdana" Size="2">
<TABLE BGCOLOR="#FFFF00" BORDER="0" WIDTH="100%">
<TR>
<TD WIDTH="100%"><FONT SIZE="5">TmlObject Object
<BR></FONT><Font Size="1">
<A HREF="#Properties">Properties</A> 
<A HREF="#Methods">Methods</A> 
<A HREF="#SubClasses">Subclasses</a></Font></TD></TR></TABLE><P><B>Unit</B><Br><A HREF="IDH_Unit_mlObject.htm">mlObject</A><P><B>Declaration</B><Br><Font Face="Courier New">TmlObject = <B>class</B>(TInterfacedObject)</Font><P><B>Description</B><Br>Reference Counting and Observer aware base class for Markup Library objects.
<p>   Provides an Interface aware reference counted memory management model for the Markup Library
   and implementation of the Observer design pattern.
<p><b>Memory Management</b>
<p>   Using a standard constructor and FreeRefs (instead of Free) library classes can
   use standard Owner/Owned semantics to control instance lifetime while peacably coexisting with
   other instances which still have references to the object.
<p>   To clarify the expected behaviour, every descendant of TmlObject should include a <b>Memory
   Management</b> section in its documentation to state which other objects may be expected to
   maintain reference to this class, for what reason, and for what lifetime.
<p><b>Observer Pattern</b>
<p>   The Observer design pattern provides a way in which one object can register an interest
   in the changes occuring in another object.
<BR>
<br>
<A NAME="Properties"></A>
<TABLE BGCOLOR="#000000" BORDER="0" cellspacing=2 WIDTH="100%">
<TR>
<TD><Font Color="#FFFFFF"><B>Introduced Public Properties</B></Font></TD></TR></Table><Font Size="2">
<Table BGCOLOR="#EEEEEE" CellSpacing="1" Width="100%">
<TR>
<TD>
<A HREF="IDH_TmlObject_ObservationCount.htm">ObservationCount</A>&nbsp;</TD>
<TD>Count of observations being made ON this instance.</TD></TR>
<TR>
<TD>
<A HREF="IDH_TmlObject_Observations.htm">Observations</A>&nbsp;</TD>
<TD>Access to observations being made ON this instance.</TD></TR>
<TR>
<TD>
<A HREF="IDH_TmlObject_WatchCount.htm">WatchCount</A>&nbsp;</TD>
<TD>Count of Observations being made BY this instance.</TD></TR>
<TR>
<TD>
<A HREF="IDH_TmlObject_Watches.htm">Watches</A>&nbsp;</TD>
<TD>Access to observations being made BY this instance.</TD></TR></Table></Font>
<br>
<A Name="Methods">
<TABLE BGCOLOR="#000000" BORDER="0" cellspacing=2 WIDTH="100%">
<TR>
<TD><Font Color="#FFFFFF"><B>Introduced Methods</B></Font></TD></TR></Table><Font Size="2">
<Table BGCOLOR="#EEEEEE" CellSpacing="1" Width="100%">
<TR>
<TD>
<IMG Src="images/public.gif"><B><A HREF="IDH_TmlObject_AddObserver.htm">AddObserver</A></B></TD>
<TD Align=center valign=middle>   </TD>
<TD>Register another instance as being interested in our changes </TD></TR>
<TR>
<TD>
<IMG Src="images/public.gif"><B><A HREF="IDH_TmlObject_AddRef.htm">AddRef</A></B></TD>
<TD Align=center valign=middle>   </TD>
<TD>Add one to this objects reference count.</TD></TR>
<TR>
<TD>
<IMG Src="images/public.gif"><B><A HREF="IDH_TmlObject_Create.htm">Create</A></B></TD>
<TD Align=center valign=middle>       
<Img Src="images/virtual2.gif"></TD>
<TD>Create an object with one reference </TD></TR>
<TR>
<TD>
<IMG Src="images/public.gif"><B><A HREF="IDH_TmlObject_Destroy.htm">Destroy</A></B></TD>
<TD Align=center valign=middle>       
<Img Src="images/overrid2.gif"></TD>
<TD>Destroy the object when all references gone </TD></TR>
<TR>
<TD>
<IMG Src="images/public.gif"><B><A HREF="IDH_TmlObject_Free.htm">Free</A></B></TD>
<TD Align=center valign=middle>   </TD>
<TD>Free this object.</TD></TR>
<TR>
<TD>
<IMG Src="images/public.gif"><B><A HREF="IDH_TmlObject_FreeRefs.htm">FreeRefs</A></B></TD>
<TD Align=center valign=middle>       
<Img Src="images/virtual2.gif"></TD>
<TD>Remove any references to this object which are known about by this object.</TD></TR>
<TR>
<TD>
<IMG Src="images/protected.gif"><A HREF="IDH_TmlObject_GetObservationByIndex.htm">GetObservationByIndex</A></TD>
<TD Align=center valign=middle>   </TD></TR>
<TR>
<TD>
<IMG Src="images/protected.gif"><A HREF="IDH_TmlObject_GetObservationCount.htm">GetObservationCount</A></TD>
<TD Align=center valign=middle>   </TD></TR>
<TR>
<TD>
<IMG Src="images/protected.gif"><A HREF="IDH_TmlObject_GetWatchByIndex.htm">GetWatchByIndex</A></TD>
<TD Align=center valign=middle>   </TD></TR>
<TR>
<TD>
<IMG Src="images/protected.gif"><A HREF="IDH_TmlObject_GetWatchCount.htm">GetWatchCount</A></TD>
<TD Align=center valign=middle>   </TD></TR>
<TR>
<TD>
<IMG Src="images/private.gif"><B><A HREF="IDH_TmlObject_IndexOfObservation.htm">IndexOfObservation</A></B></TD>
<TD Align=center valign=middle>   </TD>
<TD>Find index into Observers property of a given Observation.</TD></TR>
<TR>
<TD>
<IMG Src="images/public.gif"><B><A HREF="IDH_TmlObject_ReceiveObservation.htm">ReceiveObservation</A></B></TD>
<TD Align=center valign=middle>       
<Img Src="images/virtual2.gif"></TD>
<TD>Receive an observation with a related instance.</TD></TR>
<TR>
<TD>
<IMG Src="images/public.gif"><B><A HREF="IDH_TmlObject_Release.htm">Release</A></B></TD>
<TD Align=center valign=middle>   </TD>
<TD>Remove one from this objects reference count.</TD></TR>
<TR>
<TD>
<IMG Src="images/public.gif"><B><A HREF="IDH_TmlObject_RemoveObserver.htm">RemoveObserver</A></B></TD>
<TD Align=center valign=middle>   </TD>
<TD>Remove the registration of another instances interest.</TD></TR>
<TR>
<TD>
<IMG Src="images/public.gif"><B><A HREF="IDH_TmlObject_SendObservation.htm">SendObservation</A></B></TD>
<TD Align=center valign=middle>   </TD>
<TD>Send an observation with a related instance.</TD></TR></Table></Font>
<br>
<A Name=SubClasses>
<br>
<A Name=SubClasses>
<TABLE BGCOLOR="#000000" BORDER="0" cellspacing=2 WIDTH="100%">
<TR>
<TD><Font Color="#FFFFFF"><B>Direct Subclasses</B></Font></TD></TR></Table><Font Size="2">
<Table BGCOLOR="#EEEEEE" CellSpacing="1" Width="100%">
<TR>
<TD><A HREF="IDH_Class_TmlObservation.htm">TmlObservation</A>
<br></TD></TR>
<TR>
<TD><A HREF="IDH_Class_TmlRegularExpression.htm">TmlRegularExpression</A>
<br></TD></TR>
<TR>
<TD><A HREF="IDH_Class_TmlRegularExpressionMatcher.htm">TmlRegularExpressionMatcher</A>
<br></TD></TR>
<TR>
<TD><A HREF="IDH_Class_TmlRegularExpressionState.htm">TmlRegularExpressionState</A>
<br></TD></TR>
<TR>
<TD><A HREF="IDH_Class_TmlRegularExpressionTransition.htm">TmlRegularExpressionTransition</A>
<br></TD></TR></Table></Font>
<A Name="Examples"></A>
<p>
<HR><B><Font Color=Blue Size=3>TmlObject Examples
<p></Font></b><B><Font Color=Blue>Example 1</Font></B>
<BR>A classes method can instantiate an object, use it and then discard it as follows:<table border="0" bgcolor="#FFFED9"> <tr> <td><pre>   oInstance := TmlSomeObject.Create;
   <B>try</B>
     ...
   <B>finally</B>
     oInstance.FreeRefs;
   <B>end</B>;</pre></td></tr></Table>   From the perspective of this code, oInstance is destroyed by FreeRefs and cannot be accessed
   after that line of code - just like calling Free. However, if a method in the try..finally
   block kept a reference to the object (by calling AddRef) then actual destruction
   will be deferred until that object discards its reference (by calling Release.
<p><B><Font Color=Blue>Example 2</Font></B>
<BR>A classes method can instantiate an object use it, and then destroy it as follows:<table border="0" bgcolor="#FFFED9"> <tr> <td><pre>   oInstance := TmlSomeObject.Create;
   <B>try</B>
     ...
   <B>finally</B>
     oInstance.Free;
   <B>end</B>;</pre></td></tr></Table>   The difference from the above example is that the destructor on these objects
   makes an Assertion that there are no remaining references, ensuring that the destruction of the
   object will occur at this point. 
<p>   The impact of this is that external users of these objects can use them easily, without any
   required knowledge of their reference counting behaviour. However, if they try to destroy an
   object which still has references, the Assertion will let them know of the issue, allowing them
   to take appropriate action - either fixing the bug (if the error is genuine) or switching to
   FreeRefs (if the references are valid).
<p>